shell 셀
- 리눅스 커널과 사용자를 연결해주는 인터페이스
- 사용자의 입력 읽고, 해석하고, 프로그램 실행함
- 셀 스크립트 : 일련의 명령행을 한 파일에 담아놓은
- 리눅스 운영체제의 표준인  bash (bourne again shell)

 문법
<프로그램명> <내용>
echo : 셀 명령 , 내장 명령 , 프로그램
  - 화면에 출력하는 명령

- 변수를 내용에 넣을 수 있다.
  - 스페이스 주의할 것
  - " "는 사용해도 되고 스페이스 없으면 없어도 됨
  - 변수를 사용할 때에는 \$ 기호 사용한다.
  - 내장된 변수도 존재한다.  이것들은 대문자로 지정되어 있다.

- 명령의 특징
  - 한 프로그램이 한 가지 일만 한다.
  - 명령의 조합을 잘 해야 한다.

- 명령
  - 프로그램 자체
  - 단순명령 (simple command) : 프로그램 + 내용
  - 결합 명령 (combined command) : 프로그램 + 옵션 + 내용 
    - '-h'
    - 명령 인자


  - ls : list
  - cd : change directory
- 파이프 ( | )
  - |
  - 명령행 | 명령행
  - less
  - 이전 명령행의 출력 값을 다음 명령행의 입력값으로 보내는 역할
  'echo $PATH | less'
  - 파이프라인 : 파이프라인으로 연결한 명령행

- wc , head , cut , grep , sort  , uniq



- 입력 
  - stdin : standard input/in. 표준 입력
  - 프롬프트를 통해서 입력되는 입력스트림


-출력 
  -stdout : standard output/out. 표준 출력
  -출력 스트림

Q . /bin 하위 디렉토리를 라인별로 출력하라.
A. ls -l /bin

1. wc
- 파일 내용의 줄 (line) 수 , 단어(word) 수 , 문자(character)수 출력하는 명령

- 명령인자
 -w
 -l
 -c

ex2) txt 단어 몇 글자인지 세기 
-> wc -w one.txt

ex3) /bin  파일+디렉터리 개수 새기
-> ls-l/bin | wc -l

2. head
- 파일의 n번째 줄 내용을 화면에 출력하는 명령
-n :
  head -n3
   (default = 10)
- 파일이 90줄 -n100

ex1) 이 파일의 1번째 줄 단어 수 , 글
-> head -n1 one.txt | wc -w -c
-> head -n1 one.txt | wc -wc

ex2) /bin 파일 중에서 앞에 5개만 출력하기
-> ls /bin | head -n5

3. cut
- 파일의 내용 중에서 특정 열만 출력하는 명령
- 범위 지정 방법:
  -\t : -f
  james \t 34
  f1        f2

  cut -f1 name.txt

  - 3 , 5 ,6
  cut -f3,5,6
  - 4-5
  cut -f4-5

# 1번째 필드 조회하는데 1번째 줄만 출력하기
-> cut -f1 animals.txt | head -n1

-c :char

#animal.txt 1필드의 1번째 단어의 마지막 글자 출력 하


cut animals.txt -f1 | rev | cut -c1

cut animals.txt -f1 |head -n1 | rev | cut -c1
animals.txt 4번째 필드: Lutz, Mark에서
Lutz만 출력하기 (모든 last name만 가져오기)
cut -f4 animals.txt | head -n1 | cut -d, -f1
--------------------------------------------
03-18

4. grep
- matching 
- 대소문자 구분함
- 라인 전체를 출력한다.

Q. The가 있는 txt파일을 전체 조회하라: *
ex) grep The *.txt

- -v : 조건 문자열이 없는 라인 출력
  ex) grep -v The animals.txt

Q. /usr/lib에 포함된 하위 디렉터리 개수 알아내기 
ls -l /usr/lib | wc -

Q. /usr/lib 에 포함된 앞에가 d인 디렉터리 개수 알아내기
-> ls -l /usr/lib | cut -c1 | grep d | wc -l

5. sort 
- 정렬 , 오름차순 (abcde....)
- -r (reversed)
- 숫자 정렬 (-n)
sort -n -r sample.txt
sort -nr sample.txt

Q1. animals.txt 3번째 필드가 숫자 => 오름차순 정렬해서 출력
-> cut -f3 animals.txt | sort -n

Q2. 최소값 , 최댓값 출력하기
max-> cut -f3 animals.txt | sort -r | head -n1
min-> cut -f3 animals.txt | sort -n | head -n1

Q3./etc/passwd 디렉터리에서 사용자 이름 정렬하여 추출하기 
->head /etc/passwd | cut -d: -f1 | sort -n

cut -d : -f1 /etc/passwd | sort

Q4.사용자 중 root가 있는지 확인하기
-> head /etc/passwd | cut -d: -f1 | grep root

-w 인자 -> "root"


Q5. ls , head 
l

# letters  내용 조회하기 

6. uniq 
- 중복된 문자열을 제거해서 보여주되 , 인접한 중복 문자열만

Q. 성적표 (grades 파일) 에서 가장 빈번하지 않은 등급부터 출력 하기.
 -> uniq -c grades.txt | sort -nr | head -n1
 
 /*cut -f1 grades | sort | uniq -c | sort -n
 uniq grades | sort -r | cut -f1
 uniq -c grades | sort -nr
 sort -r grades | cut -f1 | uniq -c | head -n1
*/
aaaaccccbbbaaa

sort -> uniq 
aaaaaaabbbbcccc ->abc
위아래 두개는 다름
uniq -> sort
acba -> aabc

----------------
#1. 버전 관리
- 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내 올수 있는 시스템 
- 협업
- 툴 : 깃

#2. 깃 
- 데이터 저장 방식: 스냅샷
- 오프라인
  -if 빈 -> 텍스트 입력 -> 빈 파일
  - 키(key) - 벨류(value)
  - 키는 고유하다.
  - 벨류 (텍스트)

-깃 상태 
  -수정
  -커밋 : 저장
  -스테이지 : 스냅샷 찍어서 커밋할 준비가 된 상태 

  -수정 
  -스테이징 -> 커밋 

  -깃 커밋 순서:
    상태 체크 -> (수정) -> 스테이징 -> 커밋
    ....

1) 버전 체크
  git --version
    * git -v --version
    
2) 사용자 정보 설정하기
- name 
-email
-옵션 --global : 전체 시스템에 영향을 준다.
  - 프로젝트마다 다른 이름을 사용하고 싶을 경우는 옵션을 제외함

- core.editor
  -vi 빠져나올 떄는 : q + enter

-git help <프로그램 명>

#디렉터리
- 우리가 말하는 "폴더"
- 트리구조를 가진

- 하위 디렉터리 (child) - animals > mammals
- 상위 디렉터리 (parent) - mammals > animals
- 형제 디렉터리 (sibling) - mammals , reptile

- /로 구분함 
  animals/mammals/cow.txt
  
  <디렉터리 /.../ 파일명>
- / : 루트 디렉터리

- 절대경로: 루트에서부터 시작
- 상대경로: 현재 기준
  - 나의 현재 위치가 mammals이다. 근데 위로 가고싶다.
  1) 절대경로 : /....../mammals
  2) 상대경로 : 
        .. : 부모 디렉터리 -> cd..
        . : 현재 디렉터리 
             
- cd : change directory

- pwd , cd
- .. .
- mkdir

Q. new_dir로 이동해서 디렉터리 "dir2" 만들어보기
mkdir new_dir
cd new_dir
mkdir dir2

3) 깃 초기화
  git init : .git에 모든 변경사항(스냅샷)이 저장이된다.

4) 상태 체크
  git status

  깃이 모르는 파일일 경우
  untracked -> 'add' -> tracked

  add -> commit

  -git add <파일>



  

1. 알파벳 중복없이 정렬해서 출력하는 코드
cut -f1 grades | sort | uniq
sort grades | cut -f1 | uniq
cut -c1 grades | sort | uniq

2. sort -n : string -> num
  1, 11, 111, 2 -> 문자
  1, 2, 11, 111 -> 숫자
  sort grades | cut -f1 | uniq -c | sort -n(숫자로 인식시키기)

3. git
- 여러 파일을 한꺼번에 스테이징하기
 git add .
- git commit -> txt
 git commit -m "your msg"
- 매 수업에 커밋으로 파일을 저장하는 연습하기

-----------------------------------------

4. 문서 편집기
- vi, vim, emacs, notepad++, ...
- vi : visual editor
 - vim : vi improved(업그레이드 버전 ex) 정규표현식, ...)
- 프롬프트에서 파일 을 직접 편집할 수 있게 해주는 툴
- 특징
 - 화면 단위 편집기
 - 유닉스 계열에서 가장 많이 사용함
 - 텍스트 편집 기능만 제공함
 - 'less'
 - 모드 : 일반 모드 <-> 입력모드 <-> 명령모드
  - ESC로 모드 전환
  - 명령모드 : 파일 저장, 덮어쓸건지, 빠져나갈건지 등
  => vi로 파일 열기 -> 입력모드 -> ESC -> 빠져나가기
  - 입력모드(인자x)
   - i: 현 커서에서 입력
   - a: 현 커서 한 칸 뒤에서 입력
   - o: 한 줄 추가 후 입력
  - 명령모드
   :wq! + enter

- 파일 아무거나 열어서 수정하고 저장하고 나오기

- set -o vi (한번만)
 - vim 라인에서 엔터

 - 깃 초기화 -> 깃 시작

5. 패턴 매칭


- 프롬프트에서 셸, 프로그램이 작동한다.
 grep Linux sample.txt
- 프롬프트는 우리가 명령ㅇ르 실행하는 곳
- 셸은 사용자와 리눅스 운영체제를 연결해주는 매개체
리눅스 - 셸, 프롬프트 - 사용자
- 셸의 역할은 명령 실행, 와일드카드, 파이프라인 처리한다.

grep Linux *.txt
*.txt -> sample.txt, a.txt, ....
- 셸이 패턴매칭을 처리하여 결과물을 프로그램에 보낸다.
 - head xxx | grep | ....

 - *
  - zero or more (0개 이상)
  - *.txt : .txt, animals.txt, a.txtt
  - 0개 이상의 연속열과 일치하는

-?
 - 1개 매칭
  ch1 ch2 ch3 ... ch100
  grep Linux chapter? # 한 자리수만 매칭

- [ ]
 - 대괄호 안에 열거되어 있는 것 중 일치하는 문자열 1개 있을 때
  grep Linux ch[12345] # 12(x) 123(x)
  grep Linux ch [1-5]

Q1. 짝수로 끝나는 모든 파일 (chxxx)
 grep Linux ch*[24680]

Q2. 대문자로 시작하고, 언더스코어 포함되어 있는 파이썬 파일 매칭
 ([a-z] 모든 소문자 [A-Z] 모든 대문자 .py)

 ls [A-Z]*_.py # name_lee.py  (x)
 grep Linux ch[A-Z]*_*.py  (o)
=> 둘의 차이

Q3. /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회하기
 ls /etc/*.conf

- 와일드 카드 주의점 : 매칭되는 파일이 없으면 에러
 ls *.doc
- 디렉토리 경로, 파일명

6. 변수 평가
- "평가" : 변수를 리터럴 값으로 치환하여 값을 평가함

$VAR - 이미 지정된 변수
$var - 사용자가 지정하는 변수
 ls $var
  -> var=./notes/w3.txt
  ls ./notes/w3.txt

- HOME - 루트 디렉터리
- $USER - 사용자망


- echo 변수랑 텍스트 같이 출력가능
- printenv '$'없어도 출력해줌

- 변수 설정하기
 name=lee
 - 공백 없어야 함
 - 변수=값
 - 변수를 사용하려면 앞에 "$변수명"

 Q. age라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다" 변수를 이용해서 출력한다.
  age = 22
  echo My age is $age

  - dir1=$HOME/notes/chapter1/
  $dir1
  - cd $dir1


7. 패턴과 변수
mammals
  ㄴ lizard.txt
  ㄴ snake.txt
  ㄴ .....txt
reptiles

  mv <from> <to>
 Q1. 변수에 담아서 이동시키려면?
 dir1=mammals/*.txt
 mv $dir1 reptiles

 dir1="lizard.txt snake.txt"
 mv $dir1 reptiles  (x) (" "안의 내용 하나로 인식)

 Q2. 패턴매칭으로 이동시키려면?
  -> mv mammals/*txt reptiles

8. alias
- 단축이름 별명으로 설정하기
- alias uniqc="uniq -c"
uniqc | ...
-removeall="rm -r"

- shadowing
 alias grep="grep Linux *.txt"
 alias ls="ls-l"

 -alias
 -unalias uniqc

----------------
-04 -01 5주차

#1. 리다이렉션 
  - 표준 스트림이란?
    - 파일을 읽고 쓰는 과정처럼 데이터를 입출력하는 것
    - 데이터가 연속적으로 흐른다는 특징
    - 키보드 -> 운영체제 -> 디스플레이
      - stdin 
      - stout
      - stderr
      - out/ err 다른 방식으로 (루트로) 출력된다.

  - 리다이렉션(redirectoin)이란 ?
    - 입출력 방향을 다른 곳으로 바꾼
    - 키보드에서 입력받지 않고 파일에서 받는 것
    - 디스플레이 -> 파일로 쓰는
    ex) ls -l > 파일로 저장한다.

  - 셸의 역할이다.(운영체제와 파일을 연결하는 작업)

    1) 출력 리다이렉션 
      - 출력 내용을 표준 출력이 아닌 파일로 보내 저장하는 것
      - syntax : 명령 > 파일이름 
      
    ##  cat
      - concatenate : 연속으로 이어 붙인다.
      - cat 파일이름 1, 2,3 ......
        - 파일 1 + 2 + 3 ......
        - 파일 1 2
      - 하나 이상의 파일을 다른 여러 종류의 파일과 연결할 때 많이 사용한다.
        - 파일 복사 , 합침 , ..
        - 추가 >> 
        
    2) 입력 리다이렉션
      - 명령 < 파일

      - wc animals.txt : 프로그램이 파일의 존재를 알고 있음
      - wc < animals.txt : 리다이렉션 때문에 프로그램이 파일 존재 모름

    3) 리다이렉션이 불가능한 출력
      - 표준오류는 리다이렉션이 불가능하다.
      - 단 , 표준스트림 때문에 '2>'를 사용하면 리다이렉션이 가능하다.
      - 2>> : 이어 쓰기
      - 표준 출력과 오류 같이 리다이렉션하려면 ? &>
      
        예 : 존재하는 파일과 존재하지 않는 파일 모두 읽어서 새로운 파일 만들자.
          line1.txt non.txt -> line2.txt
          - 모두 리다이렉션하라.

        cat line1.txt non.txt 2> line2.txt #stdout err (x)
        cat line1.txt non.txt 2>> line2.txt # 이어 쓰기ㅣ
        cat line1.txt non.txt &> line2.txt

    4) 입출력 모두 다 같이 
      - 명령 < 입력파일 > 출력 파일 
      Q. animals.txt 에서 Perl 라인의 글자 (character) 수 세고 결과를 파일로 (result).
         입력도 리다이렌션 (한번에)
      ->  grep Perl < animals.txt | wc -c > result
      cat

      -ls , head , echo , cat 차이 알아두기

2. Escape Letters
- 특정문자가 가지고 있는 기능을 차단하게 해주는 기능
    예 : \\n , \\t
- \ (역슬래시, 백슬래시) 
- echo \$HOME -> $HOME 
  
#예 : 명령 i have a cat

1) ''
  - 제일 강력한 역할
  - 안에 있는 모든 기능 해제함
  - 예 $HOME (문자 그대로 출력)
  
2) ""
  - 일부 기능은 해제 하지 않는다.

3) \
  - 일부분을 지정해서 기능 해제 (문자 그대로 읽게 함)

- 큰 따옴표 안에 큰 따옴표 사용하려면 
  -> echo "home sweet home\""
- 명령 줄 바꿔쓰기 할 때 많이 쓴다.
    |\ 
  cut - c animals.txt \
    | grep ....\
    | head .....

- 별명 무효화 가능 
  alias grep = "grep -w"
  \grep

# 3. 검색경로
- /usr/bin
- $PATH
- : 기준으로 개행 붙여서 출력하라
  -> echo $PATH | tr : "\n"

-  tr <A> <B> : A -> B로 변경함.
-  우리가 사용하는 프로그램이 저장되어 있는 경로 
-  셸이 검색 경로를 순차 적으로 순회하며 프로그램을 가져온다.
-  검색 경호 확인 명령 : which , type 
  - type은 검색경로 뿐만 아니라 더 넓은 범위에서 경호 조회 (별명까지)
  - 별명이 검색경로를 우선한다.

# 4. 초기화 파일
  - shell environment
  - 초기화 파일 
  - 'ls -a $HOME' # -a : 숨겨진 파일까지 모두 출력
  - $HOME/.bashrc
  - vi로 파일 열기 -> 수정 -> 적용
  - source
  - 사용자가 자주 사용하는 환경 설정을 저장하여 항상 셸을 켤 때 마다 적용되도록 한다.


# 5. 명령히스토리
  - command history
  - 우리가 커맨드라인에 입력한 명령들을 셸이 저장해서 가지고 있다.
  - 히스토리를 사용해서 이전 명령을 불러와 재사용하는 기능을 익힌다.

  ## 1) 히스토리 열람
    - history
    - LIFO (last in first out )
    - history 10

    Q. 히스토리를 가장 처음부터 10개 출력하기 (1-10)
      history | head
    Q. 전체 히스토리에서 ehco만 출력하기
      history | grep -w echo
    
    - history -c
  
  ## 2) 재사용
    1. 커서링
    2. 히스토리 확장
    3. 증분 검색

  ### 1. 커서링
  - 위아래 키를 사용하여 히스토리 열람 
  - 간단하지만 느림
  - 이전 2~3개 명령일 경우 사용
  - 입력한 역순으로 이전 명령을 불러옴
  - $HISTSIZE= -1 # 무한 저장

  반복되는 명령은?
  - $HISTCONTROL = ignoredups # 중복되는 명령어 하나만 저장


  - 모든 명령 히스토리는 $HISTFILE에 저장된다.

### 2. 히스토리 확장 
- 특별한 표현식을 활용하는 방법
- 명령을 가져오고 실행까지 함
- !! : 이전 명령 
- !<명령어> : 가장 마지막에 한 특정 명령 가져와서 실행
- !70(히스토리 번호)
- !-3

- 장점 : 쉽다
- 단점 : 실행까지 되기 때문에 조심할 것
  - :p
  - !!
- !70:p -> !!

Q. 이전 명령의 단어 수 세기 (표현식 활용)
  !! | wc -w 
  !!:p | wc -w

  -stdout 으로 활용할 수 있다는 점

- 파일 삭제 할떄 
  -  !$ : 이전 명령의 마지막 내용
    - head grades2 에서 grades2가 $
    - alias rm ='rm -i' # 삭제하기 전에 확인하라.
  - !* : 인수 2개 이상일 경우 매칭 

### 3. 증분 검색
  - ctrl + R
  - enter
  - ctrl + c,j or ESC


-요약 
  - 명령행 편집 효율적으로 잘하자.

---------- 
#0408 

# 1. 캐럿을 이용한 히스토리 확장
md5sum *jp | ....|...

^jp^jpg
<패턴> : s/from_cmd/to_cmd 

!!:s/jp/jpg
!md5sum


# 1. 총정리 
## programs

  - <프로그램> <옵션> <인수>
  - ch 
  - 디렉토리 , .....
  - ex) ls -l /etc/passwd

  1) date
  2) who
    - 로그인 유저 정보 
    - usrs/your_name
  3) echo
    - 공백 무시
  4) ls
    - 조회
    - -l : 자세히
    - -a : 숨겨져있는 파일까지
    - 멀티 컬럼으로 stdout
    - 인수가 디렉토리
    - 인수로 파일명 쓰면 이름 그대로 반환
  5) cat
    - concatenate
    - 인수로 파일명
    - 파일 이어붙이기 가능 (컨텐츠 확장할 때 사용한다.)

  6) wc
    - 라인, 단어 , 글자 수 세기
    - -l , -w , -c
    - 인수가 없으면 stdin으로 받는다.
    
  7) cp
    - copy fromA to B
    - 다른 디렉토리일 경우
      - 상대경로로 쓰는 게 편함
      - 같은 파일명일 경우 이름 안 써도 됨
        ex) cp b ./notes
    - 여러 파일 복사 가능
      cp 1 2 3 4 5 6
      1~5 from , 6 to
      
    Q. runner에서 notes/b를 복사해서 가져오는 코드 작성하기
      cp ]./OSS/notes/b .
  8) mv
  - move 
  - mv fromA to B
  mv 1 2 3 4 5 "6"
  - 파일명 변경할 때
    mv a aa # a 사라지고 aa
  - 디렉토리 A -> B
    sample -> notes

  *** 기존에 존재하는 파일명일 경우, 덮어쓴다.

  9) rm
  - remove
  - 파일명 , 디렉토리
    -empty
  - -r 
  - 여러개 지울 수 있다.
    rm a b c d
    rm *.txt
  - 확인하고 지울 것 

  ## 디렉토리 관현 명령
  1) pwd 
  print working directory
  current directory

  2) cd
  - ..
  - .
  - cd # home

  Q. notes -> runner로 한번에 가는법
    cd ../..

  3) mkdir 
  - make directory

  4) rmdir 

  5) ln 
    - link files 
    - ln fromA formB
    - a, b
    - 메모리 효율 , 항상동기화됨
    - 다른 디렉토리에 동일한 파일을 위치시키고 싶을 때
    - ls -l로 확인 가능함
    - 파일 하나로 삭제해도 다른 파일은 삭제 되지 않는다.

## 패턴 매칭 
1. asterisk
  - "*"
  - zero or more 
    cat * # 현재 디렉토리에 있는 모든 파일
    chapter* # chapter로 시작하는 모든 파일

    Q. t가 들어있는 모든 파일
      *t*

2. ?
  - 한 개 매칭
    echo ? # 글자 1개로 된 파일 전부 
    echo ?? # bb bb.txt

3. [, ]
  - 특정 글자 1개 매칭되는 것 전부
  [abcd] # or
  [02468] #
  [0-9] # ahems tntwk 
  [a-z]
  
  Q. o를 제외한 모든 소문자
    [a-np-z]
    [!o]
  
  4. escape letter
    - 공백 , $, ...
    - \
      cat file_a file_b
      cat hello\ world 
      '',""
    - echo는 예외
  
  Q. 'who are you?'라는 디렉토리를 생성하고 목록 조회하는 코드
   생성 : mkdir "who are you?"
          mkdir who\ are\ you?
          mkdir 'who are you?'
   
   조회 : ls "who are you\?"

  ## 리다이렉션
  - 입력 < , <<
  - 출력 > 
  - 에러 2
    - "" > cp_pattern1

  ## 파이프라인
  - |
  - 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다.
  - A | B | ...
  - "필터" : 파이프라인을 사용할 수 있는, 입출력값을 수정할 수 있는 프로그램
    - grep, cut ,

  ##
  - ; - 여러 명령 한 줄에 쓸 때
  - date; pwd

  - 오래 걸리는 명령 백그라운드로 보내기
    - <명령> &
     예: cat bigdat > file1 &
    - 다른 프로그램 동시에 수행 가능
    - stdin (조심)

  - ps
    - 프로세스 정보 나타냄
    - PID : id
    - TTY : 터미넣 정보
    - time : 구동 시간
    - cmd - 프로세스 이름

  ## 명령 2
  1. cut 
    - cut <> 파일명
    - -c -f -d
    - -c2,5,6
    - -f : tab 구분
    Q. 10번째 글자부터 끝까지
    -> cut -c 10-

    - -d<구분자>
      -d : 
        cut -d: -f1 file # f default is tab.
  2. paste
    - cut 과 반대됨
    - 컴럼별로 데이터 붙임
    - 디폴트는 탭 
  -d<구분자> : 구분자 지정
  -s : 같은 파일을 수정할 경우
  ' ' -> \t
    paste -s -d' ' file

  3. grep 
    - grep <패턴> <디렉토리>
    - 패턴에 매칭되는 문자열을 가진 라인 출력
    - 매칭 없으면 아무것도 출력되지 않는다.
      grep Linux * # 파일 내부의 텍스트
      .... | grep Linux # 출력에서 받은 입력값
      
    Q. 전체 파일에서 * 패턴 가진 것 찾기
    grep '*'*


  => 패턴은 ''를 사용하는 게 좋다.
  [a-z]
  ^, $
  ^[A-Z]
  *.txt$

  -i : 대소무자 구분 안함
  -w : 정확한 매칭만
    the -> there(X)
  -v : 반대, 포함 안 되는
  -l : 해당 매칭이 있는 파일명

  Q. 해당 매칭이 있는 파일 개수
    grep -l 'A' * | wc -l

  4. sort
    - 정렬
    - 라인별로 , 오름차순  디폴트
    - -r
    - -n : 숫자로 인식
      - 셸은 모든 인수를 문자열로 인식한다.
        str : 1, 11, 2, 3
        int : 1, 2, 3, 11
    - 특수문자 , 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의 할 것
    - ' ' #32,\
    - -u : sort + uniq
  -o :
    - sort file1 > file1 (x)
    - 정렬된 결과물을 같은 파일에 저장

  5. uniq 
    - 중복 삭제
    - 인접한 것만 고려한다.
    - -d: 정렬 결과 중 중복된 것 삭제
    - -c : 중복된 횟수 카운트 

  6. tr 
    - tr from_char to_char
    - tr e x < input
    - stdin만 가능함
    - animals.txt e -> x
    - 소문자 -> 대문자
      tr '[a-z]' '[A-Z]' < animals.txt
    - -d : 삭제 
      tr -d the
---------------------
#  04 15

 - 정규 표현식 ###
 - grep
 - ed
 - sed ### (5장)

#1. 정규표현식 
- 와일드카드와 혼동하지 말것
  * ? ... chapter*.txt (2장)
- 패턴 매칭할 때 사용한다.
-
  ##1. 마침표 
    - any single character
    - r. # ro, rk, rc, ....
    - .x. # xxx. oxo, ....
    - [a-zA-Z]

  ##2. ^ (caret)
  -  라인의 처음
  - [^] # not
  - [^a-z] # 소문자가 아닌

  ##3. $ (dollar)
    - 라인의 끝 
    - '^$' #빈 줄

  ##4. [리스트]
  - [a-z]
  - [a-np-z] # o를 제외한 모든 소문자
  - [a-n][p-z]
  - grep '[Tt]he' animals.txt
  - grep -i 'the' animals.txt

  ##5. * 
  - zero or more
  - x* # x......
  - 앞글자 한정 
  - x 시작하는 단어 
    x*(x)
    xx*(o)

  ##6. \+
  - 1개 이상
    x\+ 

  ##7. \?
  - zero or one

  ##8. \{i,j\}
  - j : 
  - i,
  - ,j
  - x\{10\} #10번
  - x\{1,10\}
  - x\{10,\}

  ##9. \(regex\)
    - back referencing이 가능하다.
    - '^\(.\)\1' # 동일한 알파벳 2개로 시작하는 라인
    *aa... ll...
    - abba
    - '\(a\)\(b\)2\1'

  ##10. regex1 \| regex2
  - regex1 or regex2


  # Q. 
  1) a-f까지 매칭
  2) b나 ab 매칭
  3) 2번 + aaaaaab 매칭
  4) 모든 글자 매칭
  5) #으로 시작하는 문장 매칭
  6) \로 끝나는 문장 매칭
  7) 대문자로 시작하지 않는 문장 매칭
  8) 빈줄이 아닌 모든 줄 매칭
  9) cookie나 cake이 포함된 줄 매칭
  10) w. 매칭

  1. grep [a-f]
  2. grep 'b\|ab'
  3. grep 'b\|ab \|a*b'
  4. grep '^'
  5. grep ^#
  6. grep \$
  7. grep [^A-Z]\
  8. grep [^'^ $']
  9. grep 'cookie \| cake'
  10. grep 'w.'

  ##1. 확장 
  [a-zA-Z0-9_] \w
  \W (not)
  \b  : word boundary (앞뒤) h,o
  \b<regex>\b
    \< 앞 \> 뒤
  
  \B ell
  \s whitespace (space , tab)
  \s
  
  #2. ed
  - 텍스트 에디터
  - line-oriented text editor
  - 인터렉티브형
  - format : ed file

  - 치환 (a -> b)하라
    [address][명령][정규식][flags]
    1,$s/a/b/
    p

    1,$s/[a-z]//g # global (flag)

    1,$s[AEIOUaeiou]//g #대문자 포함


    Q. 모음 지우기
    => 정규표현식 연습 가능함

    - ctrl+d

  #3. sed
  - stream editor
  - 표준 입출력 사용 가능 ,파이프라인 사용 가능
  - 인터렉티브(x)
  - 단위: 라인


  Q.animals.txt에서 python -> PYTHON 변경후 파일 전체 동일한 이름으로 저장하기
  - 아는 프로그램으로

  '''sh
  tr python PYTHON > animals.txt
  
  cat animals.txt | tr python PYTHON > animals.txt
  
  tr 'python' 'PYTHON' animals.txt > animals.txt (x)  
  ; tmp ; mv tmp animals.txt

  sed -i 's/python/PYTHON/g' animals.txt

##2) sed 실행하기
  - format : sed <script><input_file> #> <out_file>
  - ex) "hello -> world" file
  - sed 's/hello/world/g' file
  - sed -i 's/hello/world/g' file
  - sed 's/hello/world/g' file < file
  - cat file | sed 's/hello/world/g' #파이프라인으로 받을 수 있다.

### -i option
  - 동일한 파일에 저장한다. (in-place)
  - 임시파일을 따로 저장하고 싶을 때 -iE # fileE

### -n option 
  - p 와 같이 사용하여 출력 범위를 지정한다.
  - sed -n '2p' file
  - 5~10줄 출력하기
   sed -n '5,10p' file # ,가 range

  - python이 있는 라인만 출력해줘
    sed -n '/python/p' file

  - ; 으로 여러 정규식 연결 가능
    sed -n '1p ; $p' fileA fileB fileC
    cat fileA fileB fileC | sed -n '1p ; $p'
### -e -f
  -e : expression
  -f : file
  sed -e '1p ; $p' -f file
  - 옵션이 없으면 1번째가 정규표현식, 2번째가 입력파일

sed <option> <script> <input_file> # full format

##3) script
- format : <address> <cmd> <options>
  '2p'
  - address : 2
  - cmd : p
  - 5,10p
  - '3d

Q. input_file 에서 python으로 시작하는 라인 삭제하고 , hello -> world로 변경한 뒤 out_file에 저장 하라.
  sed '/^python/d ; s/hello/world/g' input_file > out_file
  sed -e '/^python/d' -e 's/hello/world/g' input_file > out_file

Q. 
1) 5번째 줄 삭제
2) python, Python 포함 줄 삭제
3) 처음 10개 줄 중에 2번 실행
4) 각 줄에 첫 3글자 삭제

s'/python/g'

- p, d, s, q (quit)

### cmd 's'
  - format : s/regex/replacement/flag
  - g
  - p : 해당부분 프린트 
  - i : 대소문자 구분 없음

  Q. image.jpg.1 , image.jpg.2 , image.jpg.3
    >> image1.jpg , image2.jpg , image3.jpg
    
    sed s/\(\)//g

  ### address
  - 범위 지정
    '2p'
    sed '160s/a/b/'
    sed '/apples/s///' #apple이 있는 부분에서 뭔가를 하는 
    sed '/apple/!s///' # ! : not

    sed '160,2s/a/b' #160만 수행하고 끝
    $
    1,$~2 # step==2

    # 스크립트 작성
    - 파일에 커맨드라인 입력
    - 모드 변경한다.
      chmod + x file
      실행
      name
      ./name

    - 주석 #로 단다.
      - 라인 단위.


------------------------------




    












  








  
  

    
  
  




